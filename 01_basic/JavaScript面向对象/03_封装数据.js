// 封装的目的是将信息隐藏
// 一般我们讨论封装数据和封装方法
// 还有更加广义的封装，包括封装类型和封装变化

// 1.封装数据
// ES6之前封装
// 利用私有规范
var myObj = (function () {
  var _name = 'narci';
  return {
    getName: function () {
      return _name;
    }
  }
})();

console.log(myObj.getName());
console.log(myObj._name); // undefined

// 2.封装方法
/**
 * 封装的目的是将信息隐藏，封装应该被视为“任何形式的封装”​，也就是说，封装不仅仅是隐藏数据，还包括隐藏实现细节、设计细节以及隐藏对象的类型等。
 * 封装使得对象内部的变化对其他对象而言是透明的，也就是不可见的。对象对它自己的行为负责。其他对象或者用户都不关心它的内部实现。封装使得对象之间的耦合变松散，对象之间只通过暴露的API接口来通信。当我们修改一个对象时，可以随意地修改它的内部实现，只要对外的接口没有变化，就不会影响到程序的其他功能。
 */

/**
 * 3.封装类型
 * 封装类型是静态类型语言中一种重要的封装方式。一般而言，封装类型是通过抽象类和接口来进行的[插图]。把对象的真正类型隐藏在抽象类或者接口之后，相比对象的类型，客户更关心对象的行为。
 * 
 */

/**
 * 4.封装变化
 * 
 * 考虑你的设计中哪些地方可能变化，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎样才能够在不重新设计的情况下进行改变。这里的关键在于封装发生变化的概念，这是许多设计模式的主题 -- 《设计模式》
 * 
 * 当我们想办法把程序中变化的部分封装好之后，剩下的即是稳定而可复用的部分了。
 */