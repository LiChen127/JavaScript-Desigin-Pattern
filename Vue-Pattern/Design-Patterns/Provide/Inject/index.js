// 在管理父组件和子组件之间的数据时，Vue 允许我们使用一种称为props 的东西 将数据从父组件传递到子组件。props 只能单向流动，即从父组件到子组件（并进一步向下流动）。当父元素的状态发生变化时，Vue 将重新渲染依赖于这些值的组件。

// 在大多数情况下，使用 props 效果很好。但是，当在组件树中包含大量组件的大型应用程序中工作时，props 可能变得难以维护，因为需要在组件树中的每个组件中声明 props。


// 当考虑如何在大量组件之间管理数据时，通常最好努力寻找一种解决方案，以可维护和可管理的方式管理应用程序级状态（例如创建可重用的存储、使用 Pinia 等）

// 还有一种模式, 依赖注入来避免复杂的单向数据流


// Vue中的provide()允许我们向组件树传递数据，而无需drop-drill
// inject()用于子组件，以便从父组件或者任何的组件组件中获取provide提供的data/fn
// 除了能够provide()从父组件获取数据之外，我们provide()还可以将其提升到应用程序级别（即我们实例化 Vue 应用程序的地方）。